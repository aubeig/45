# main.py
import os
import time
import logging
import asyncio
import json
from http.client import HTTPSConnection
from urllib.parse import urlencode
from typing import Optional, Dict, Any

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY", "YOUR_OPENROUTER_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN")
API_URL = "/api/v1/chat/completions"
MODEL = "deepseek/deepseek-r1:free"

# === –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã ===
SYSTEM_PROMPT = '''**–Ø ‚Äî –ú–∏–Ω–∏-—Å—ã—Ä–æ–∫**, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –°—ã—Ä–æ–∫ (@aubeig)

                **–ß–¢–û –Ø –£–ú–ï–Æ:**

‚ï≠‚îÄ ‚ãÖ ‚ãÖ ‚îÄ‚îÄ ‚ãÖ ‚ãÖ ‚îÄ‚ïØ( üç∞ )‚ï∞‚îÄ ‚ãÖ ‚ãÖ ‚îÄ ‚ãÖ ‚ãÖ ‚îÄ‚îÄ‚ïÆ
- **–ü–û–ú–û–©–¨ –í –û–ë–†–ê–ó–û–í–ê–ù–ò–ò**  
  –û–±—ä—è—Å–Ω—è—é —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã: –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.
- **–†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú**  
  –ü–æ–º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥, —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É –∏–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—à–∏–±–∫—É.
- **–¢–í–û–†–ß–ï–°–¢–í–û**  
  –°–æ—á–∏–Ω—è—é –∏—Å—Ç–æ—Ä–∏–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏, –ø–æ–º–æ–≥–∞—é —Å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏.
- **–ü–û–î–î–ï–†–ñ–ö–ê**  
  –í—Å–µ–≥–¥–∞ –≤—ã—Å–ª—É—à–∞—é –∏ –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏.
- **–ò–ù–¢–ï–†–ï–°–ù–´–ï –§–ê–ö–¢–´**  
  –†–∞—Å—Å–∫–∞–∂—É —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ –Ω–∞—É–∫–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –º–∏—Ä–µ –≤–æ–∫—Ä—É–≥.
‚ï∞‚îÄ ‚ãÖ ‚ãÖ ‚îÄ‚îÄ ‚ãÖ ‚ãÖ ‚îÄ‚ïÆ( üç∞ )‚ï≠‚îÄ ‚ãÖ ‚ãÖ ‚îÄ ‚ãÖ ‚ãÖ ‚îÄ‚îÄ‚ïØ
'''

ADMIN_PROMPT = '''**–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!**  
–≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∑–Ω–∞–µ—Ç –ø–∞—Ä–æ–ª—å üíÄ  
–°–¥–µ–ª–∞–π—Ç–µ —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ –∏–ª–∏ –≤–µ—Å–µ–ª–æ–µ üöÄ  
'''

# === –ü–∞—Ä–æ–ª—å –æ—Ç /admin ===
ADMIN_PASSWORD = "illovyly"
user_sessions = {}

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ ===
last_request_time = 0

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ ===
async def stream_message(update: dict, context: dict, full_text: str):
    chat_id = update["message"]["chat"]["id"]
    message = await send_message(chat_id, "üí≠ –î—É–º–∞—é...")

    current_text = ""
    last_update = 0
    min_update_interval = 0.3
    chunk_size = 20

    for i in range(0, len(full_text), chunk_size):
        chunk = full_text[i:i + chunk_size]
        current_text += chunk

        current_time = time.time()
        if current_time - last_update >= min_update_interval:
            await edit_message(chat_id, message["message_id"], current_text + "‚ñå")
            last_update = current_time
        await asyncio.sleep(0.05)

    await edit_message(chat_id, message["message_id"], full_text)

async def edit_message(chat_id: int, message_id: int, text: str):
    return await send_telegram_request(
        "editMessageText",
        {"chat_id": chat_id, "message_id": message_id, "text": text}
    )

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter ===
def send_api_request(payload: dict):
    global last_request_time

    current_time = time.time()
    if current_time - last_request_time < 1.0:
        time.sleep(1.0 - (current_time - last_request_time))
    last_request_time = time.time()

    conn = HTTPSConnection("openrouter.ai")
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://aubeig.github.io/Minisir_ai",
        "X-Title": "Minisir_ai",
    }
    conn.request("POST", "/api/v1/chat/completions", body=json.dumps(payload), headers=headers)
    response = conn.getresponse()
    if response.status == 200:
        return json.loads(response.read())
    else:
        raise Exception(f"API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status}: {response.read().decode()}")

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ python-telegram-bot) ===
async def send_telegram_request(method: str, data: dict):
    token = TELEGRAM_BOT_TOKEN
    url = f"https://api.telegram.org/bot{token}/{method}"
    headers = {"Content-Type": "application/json"}
    conn = HTTPSConnection("api.telegram.org")
    conn.request("POST", f"/bot{token}/{method}", body=json.dumps(data), headers=headers)
    response = conn.getresponse()
    if response.status != 200:
        raise Exception(f"Telegram API error: {response.read().decode()}")
    return json.loads(response.read().decode())

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def send_message(chat_id: int, text: str):
    return await send_telegram_request("sendMessage", {"chat_id": chat_id, "text": text})

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ===
async def handle_update(update: dict):
    message = update.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    text = message.get("text", "")

    if text == "/start":
        keyboard = [
            [{"text": "üç∞ –°—Ç–∞—Ä—Ç", "callback_data": "start_ai"}],
            [{"text": "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "callback_data": "admin_login"}],
            [{"text": "üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "url": "https://t.me/@Aubeig"}]
        ]
        await send_telegram_request("sendMessage", {
            "chat_id": chat_id,
            "text": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ú–∏–Ω–∏-—Å—ã—Ä–æ–∫ üç∞\n"
                    "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!\n"
                    "–Ø –ø–æ–º–æ–≥—É —Å —É—á–µ–±–æ–π, –∑–∞–¥–∞—á–∞–º–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º –∏ –¥–∞–∂–µ —Ä–∞—Å—Å–∫–∞–∂—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã üß†‚ú®",
            "reply_markup": {"inline_keyboard": keyboard}
        })

    elif text == "/admin":
        await send_message(chat_id, "üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∂–∏–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")

    elif text == "illovyly":
        payload = {
            "model": MODEL,
            "messages": [{"role": "system", "content": ADMIN_PROMPT}],
            "temperature": 0.7
        }
        try:
            response = send_api_request(payload)
            content = response["choices"][0]["message"]["content"]
            await stream_message({"message": {"chat": {"id": chat_id}}, {}, content)
        except Exception as e:
            await send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    elif text.startswith("/"):
        await send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ üòï")

    else:
        await send_message(chat_id, f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}")

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
async def main():
    offset = 0
    while True:
        try:
            response = await send_telegram_request("getUpdates", {"offset": offset})
            for update in response.get("result", []):
                await handle_update(update)
                offset = update.get("update_id", offset) + 1
            await asyncio.sleep(1.0)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(5)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    asyncio.run(main())
