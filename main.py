# main.py
import os
import time
import logging
import asyncio
import json
from http.client import HTTPSConnection
from urllib.parse import urljoin, urlencode

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.bot import Bot
from telegram.ext.callbackcontext import ContextTypes
from telegram.ext.callbackqueryhandler import CallbackQueryHandler
from telegram.ext.commandhandler import CommandHandler
from telegram.ext.messagehandler import MessageHandler
from telegram.ext.filters import Filters

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY", "YOUR_OPENROUTER_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN")
API_URL = "/api/v1/chat/completions"
MODEL = "deepseek/deepseek-r1:free"

# === –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã ===
SYSTEM_PROMPT = '''**–Ø ‚Äî –ú–∏–Ω–∏-—Å—ã—Ä–æ–∫**, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –°—ã—Ä–æ–∫ (@aubeig)

                **–ß–¢–û –Ø –£–ú–ï–Æ:**

‚ï≠‚îÄ ‚ãÖ ‚ãÖ ‚îÄ‚îÄ ‚ãÖ ‚ãÖ ‚îÄ‚ïØ( üç∞ )‚ï∞‚îÄ ‚ãÖ ‚ãÖ ‚îÄ ‚ãÖ ‚ãÖ ‚îÄ‚îÄ‚ïÆ
- **–ü–û–ú–û–©–¨ –í –û–ë–†–ê–ó–û–í–ê–ù–ò–ò**  
  –û–±—ä—è—Å–Ω—è—é —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã: –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.
- **–†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú**  
  –ü–æ–º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥, —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É –∏–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—à–∏–±–∫—É.
- **–¢–í–û–†–ß–ï–°–¢–í–û**  
  –°–æ—á–∏–Ω—è—é –∏—Å—Ç–æ—Ä–∏–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏, –ø–æ–º–æ–≥–∞—é —Å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏.
- **–ü–û–î–î–ï–†–ñ–ö–ê**  
  –í—Å–µ–≥–¥–∞ –≤—ã—Å–ª—É—à–∞—é –∏ –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏.
- **–ò–ù–¢–ï–†–ï–°–ù–´–ï –§–ê–ö–¢–´**  
  –†–∞—Å—Å–∫–∞–∂—É —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ –Ω–∞—É–∫–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –º–∏—Ä–µ –≤–æ–∫—Ä—É–≥.
‚ï∞‚îÄ ‚ãÖ ‚ãÖ ‚îÄ‚îÄ ‚ãÖ ‚ãÖ ‚îÄ‚ïÆ( üç∞ )‚ï≠‚îÄ ‚ãÖ ‚ãÖ ‚îÄ ‚ãÖ ‚ãÖ ‚îÄ‚îÄ‚ïØ
'''

ADMIN_PROMPT = '''**–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!**  
–≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∑–Ω–∞–µ—Ç –ø–∞—Ä–æ–ª—å üíÄ  
–°–¥–µ–ª–∞–π—Ç–µ —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ –∏–ª–∏ –≤–µ—Å–µ–ª–æ–µ üöÄ  
'''

# === –ü–∞—Ä–æ–ª—å –æ—Ç /admin ===
ADMIN_PASSWORD = "illovyly"
user_sessions = {}

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ ===
last_request_time = 0

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ ===
async def stream_message(update: Update, context: ContextTypes.DEFAULT_TYPE, full_text: str):
    chat_id = update.effective_chat.id
    current_text = ""
    last_update = 0
    min_update_interval = 0.3
    chunk_size = 20

    try:
        message = await context.bot.send_message(chat_id=chat_id, text="üí≠ –î—É–º–∞—é...", parse_mode=ParseMode.MARKDOWN)

        # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        for i in range(0, len(full_text), chunk_size):
            chunk = full_text[i:i + chunk_size]
            current_text += chunk

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ —á–∞—â–µ —á–µ–º min_update_interval
            current_time = time.time()
            if current_time - last_update >= min_update_interval:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message.message_id,
                    text=current_text + "‚ñå",
                    parse_mode=ParseMode.MARKDOWN
                )
                last_update = current_time
            await asyncio.sleep(0.05)

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message.message_id,
            text=full_text,
            parse_mode=ParseMode.MARKDOWN
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stream_message: {e}")
        await update.message.reply_text(full_text, parse_mode=ParseMode.MARKDOWN)

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ OpenRouter —á–µ—Ä–µ–∑ http.client ===
def send_api_request(payload: dict, headers: dict):
    global last_request_time

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (1 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É)
    current_time = time.time()
    if current_time - last_request_time < 1.0:
        time.sleep(1.0 - (current_time - last_request_time))

    last_request_time = current_time

    conn = HTTPSConnection("openrouter.ai")
    headers = {
        "Authorization": f"Bearer {headers['Authorization']}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://aubeig.github.io/Minisir_ai",
        "X-Title": "Minisir_ai",
    }

    conn.request("POST", "/api/v1/chat/completions", body=json.dumps(payload), headers=headers)

    response = conn.getresponse()
    if response.status == 200:
        return json.loads(response.read())
    else:
        raise Exception(f"API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status}: {response.read().decode()}")

# === –ö–æ–º–∞–Ω–¥—ã Telegram ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üç∞ –°—Ç–∞—Ä—Ç", callback_data='start_ai')],
        [InlineKeyboardButton("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_login')],
        [InlineKeyboardButton("üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/@Aubeig")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ú–∏–Ω–∏-—Å—ã—Ä–æ–∫ üç∞\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!\n"
        "–Ø –ø–æ–º–æ–≥—É —Å —É—á–µ–±–æ–π, –∑–∞–¥–∞—á–∞–º–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º –∏ –¥–∞–∂–µ —Ä–∞—Å—Å–∫–∞–∂—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã üß†‚ú®",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'start_ai':
        await query.edit_message_text(text="üç∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –ú–∏–Ω–∏-—Å—ã—Ä–∫–∞...")
        await query.edit_message_text(text="üí≠ –î—É–º–∞—é...")

        payload = {
            "model": MODEL,
            "messages": [{"role": "system", "content": SYSTEM_PROMPT}],
            "temperature": 0.7,
            "stream": True
        }

        headers = {
            "Authorization": OPENROUTER_API_KEY
        }

        try:
            response = send_api_request(payload, headers)
            content = response["choices"][0]["message"]["content"]
            await stream_message(update, context, content)
        except Exception as e:
            await query.edit_message_text(text=f"‚ùå –û—à–∏–±–∫–∞: {e}")

    elif query.data == 'admin_login':
        user_id = update.effective_user.id
        user_sessions[user_id] = {"state": "awaiting_password"}
        await query.edit_message_text(text="üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∂–∏–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")

async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_sessions.get(user_id, {}).get("state") == "awaiting_password":
        password = update.message.text.strip()

        if password == ADMIN_PASSWORD:
            user_sessions[user_id] = {"state": "admin_logged_in"}
            payload = {
                "model": MODEL,
                "messages": [{"role": "system", "content": ADMIN_PROMPT}],
                "temperature": 0.7
            }

            headers = {
                "Authorization": OPENROUTER_API_KEY
            }

            try:
                response = send_api_request(payload, headers)
                content = response["choices"][0]["message"]["content"]
                await stream_message(update, context, content)
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        user_sessions.pop(user_id, None)

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    bot = Bot(token=TELEGRAM_BOT_TOKEN)

    bot.add_handler(CommandHandler("start", start))
    bot.add_handler(CallbackQueryHandler(button_handler))
    bot.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_password))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await bot.start_polling()

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    asyncio.run(main())
